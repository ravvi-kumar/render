
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `InventoryItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model InventoryItem
 * 
 */
export type InventoryItemModel = runtime.Types.Result.DefaultSelection<Prisma.$InventoryItemPayload>

export type AggregateInventoryItem = {
  _count: InventoryItemCountAggregateOutputType | null
  _avg: InventoryItemAvgAggregateOutputType | null
  _sum: InventoryItemSumAggregateOutputType | null
  _min: InventoryItemMinAggregateOutputType | null
  _max: InventoryItemMaxAggregateOutputType | null
}

export type InventoryItemAvgAggregateOutputType = {
  inbound: number | null
  weight: number | null
  cubicQtyPerUnit: number | null
  stock: number | null
}

export type InventoryItemSumAggregateOutputType = {
  inbound: number | null
  weight: number | null
  cubicQtyPerUnit: number | null
  stock: number | null
}

export type InventoryItemMinAggregateOutputType = {
  id: string | null
  inventoryDataId: string | null
  userId: string | null
  image: string | null
  name: string | null
  sku: string | null
  upc: string | null
  comments: string | null
  inbound: number | null
  tag: string | null
  weight: number | null
  cubicQtyPerUnit: number | null
  stock: number | null
  key: string | null
  imageUrl: string | null
  received: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InventoryItemMaxAggregateOutputType = {
  id: string | null
  inventoryDataId: string | null
  userId: string | null
  image: string | null
  name: string | null
  sku: string | null
  upc: string | null
  comments: string | null
  inbound: number | null
  tag: string | null
  weight: number | null
  cubicQtyPerUnit: number | null
  stock: number | null
  key: string | null
  imageUrl: string | null
  received: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InventoryItemCountAggregateOutputType = {
  id: number
  inventoryDataId: number
  userId: number
  image: number
  name: number
  sku: number
  upc: number
  comments: number
  inbound: number
  tag: number
  weight: number
  cubicQtyPerUnit: number
  stock: number
  key: number
  imageUrl: number
  received: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InventoryItemAvgAggregateInputType = {
  inbound?: true
  weight?: true
  cubicQtyPerUnit?: true
  stock?: true
}

export type InventoryItemSumAggregateInputType = {
  inbound?: true
  weight?: true
  cubicQtyPerUnit?: true
  stock?: true
}

export type InventoryItemMinAggregateInputType = {
  id?: true
  inventoryDataId?: true
  userId?: true
  image?: true
  name?: true
  sku?: true
  upc?: true
  comments?: true
  inbound?: true
  tag?: true
  weight?: true
  cubicQtyPerUnit?: true
  stock?: true
  key?: true
  imageUrl?: true
  received?: true
  createdAt?: true
  updatedAt?: true
}

export type InventoryItemMaxAggregateInputType = {
  id?: true
  inventoryDataId?: true
  userId?: true
  image?: true
  name?: true
  sku?: true
  upc?: true
  comments?: true
  inbound?: true
  tag?: true
  weight?: true
  cubicQtyPerUnit?: true
  stock?: true
  key?: true
  imageUrl?: true
  received?: true
  createdAt?: true
  updatedAt?: true
}

export type InventoryItemCountAggregateInputType = {
  id?: true
  inventoryDataId?: true
  userId?: true
  image?: true
  name?: true
  sku?: true
  upc?: true
  comments?: true
  inbound?: true
  tag?: true
  weight?: true
  cubicQtyPerUnit?: true
  stock?: true
  key?: true
  imageUrl?: true
  received?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InventoryItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InventoryItem to aggregate.
   */
  where?: Prisma.InventoryItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InventoryItems to fetch.
   */
  orderBy?: Prisma.InventoryItemOrderByWithRelationInput | Prisma.InventoryItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InventoryItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InventoryItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InventoryItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InventoryItems
  **/
  _count?: true | InventoryItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: InventoryItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: InventoryItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InventoryItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InventoryItemMaxAggregateInputType
}

export type GetInventoryItemAggregateType<T extends InventoryItemAggregateArgs> = {
      [P in keyof T & keyof AggregateInventoryItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInventoryItem[P]>
    : Prisma.GetScalarType<T[P], AggregateInventoryItem[P]>
}




export type InventoryItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InventoryItemWhereInput
  orderBy?: Prisma.InventoryItemOrderByWithAggregationInput | Prisma.InventoryItemOrderByWithAggregationInput[]
  by: Prisma.InventoryItemScalarFieldEnum[] | Prisma.InventoryItemScalarFieldEnum
  having?: Prisma.InventoryItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InventoryItemCountAggregateInputType | true
  _avg?: InventoryItemAvgAggregateInputType
  _sum?: InventoryItemSumAggregateInputType
  _min?: InventoryItemMinAggregateInputType
  _max?: InventoryItemMaxAggregateInputType
}

export type InventoryItemGroupByOutputType = {
  id: string
  inventoryDataId: string
  userId: string
  image: string
  name: string
  sku: string
  upc: string
  comments: string
  inbound: number
  tag: string
  weight: number
  cubicQtyPerUnit: number
  stock: number
  key: string | null
  imageUrl: string | null
  received: boolean
  createdAt: Date
  updatedAt: Date
  _count: InventoryItemCountAggregateOutputType | null
  _avg: InventoryItemAvgAggregateOutputType | null
  _sum: InventoryItemSumAggregateOutputType | null
  _min: InventoryItemMinAggregateOutputType | null
  _max: InventoryItemMaxAggregateOutputType | null
}

type GetInventoryItemGroupByPayload<T extends InventoryItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InventoryItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InventoryItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
      }
    >
  > 



export type InventoryItemWhereInput = {
  AND?: Prisma.InventoryItemWhereInput | Prisma.InventoryItemWhereInput[]
  OR?: Prisma.InventoryItemWhereInput[]
  NOT?: Prisma.InventoryItemWhereInput | Prisma.InventoryItemWhereInput[]
  id?: Prisma.StringFilter<"InventoryItem"> | string
  inventoryDataId?: Prisma.StringFilter<"InventoryItem"> | string
  userId?: Prisma.StringFilter<"InventoryItem"> | string
  image?: Prisma.StringFilter<"InventoryItem"> | string
  name?: Prisma.StringFilter<"InventoryItem"> | string
  sku?: Prisma.StringFilter<"InventoryItem"> | string
  upc?: Prisma.StringFilter<"InventoryItem"> | string
  comments?: Prisma.StringFilter<"InventoryItem"> | string
  inbound?: Prisma.FloatFilter<"InventoryItem"> | number
  tag?: Prisma.StringFilter<"InventoryItem"> | string
  weight?: Prisma.FloatFilter<"InventoryItem"> | number
  cubicQtyPerUnit?: Prisma.FloatFilter<"InventoryItem"> | number
  stock?: Prisma.IntFilter<"InventoryItem"> | number
  key?: Prisma.StringNullableFilter<"InventoryItem"> | string | null
  imageUrl?: Prisma.StringNullableFilter<"InventoryItem"> | string | null
  received?: Prisma.BoolFilter<"InventoryItem"> | boolean
  createdAt?: Prisma.DateTimeFilter<"InventoryItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InventoryItem"> | Date | string
  inventoryData?: Prisma.XOR<Prisma.InventoryDataScalarRelationFilter, Prisma.inventoryDataWhereInput>
}

export type InventoryItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  inventoryDataId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  image?: Prisma.SortOrder
  name?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  upc?: Prisma.SortOrder
  comments?: Prisma.SortOrder
  inbound?: Prisma.SortOrder
  tag?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  cubicQtyPerUnit?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  key?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  received?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  inventoryData?: Prisma.inventoryDataOrderByWithRelationInput
}

export type InventoryItemWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.InventoryItemWhereInput | Prisma.InventoryItemWhereInput[]
  OR?: Prisma.InventoryItemWhereInput[]
  NOT?: Prisma.InventoryItemWhereInput | Prisma.InventoryItemWhereInput[]
  inventoryDataId?: Prisma.StringFilter<"InventoryItem"> | string
  userId?: Prisma.StringFilter<"InventoryItem"> | string
  image?: Prisma.StringFilter<"InventoryItem"> | string
  name?: Prisma.StringFilter<"InventoryItem"> | string
  sku?: Prisma.StringFilter<"InventoryItem"> | string
  upc?: Prisma.StringFilter<"InventoryItem"> | string
  comments?: Prisma.StringFilter<"InventoryItem"> | string
  inbound?: Prisma.FloatFilter<"InventoryItem"> | number
  tag?: Prisma.StringFilter<"InventoryItem"> | string
  weight?: Prisma.FloatFilter<"InventoryItem"> | number
  cubicQtyPerUnit?: Prisma.FloatFilter<"InventoryItem"> | number
  stock?: Prisma.IntFilter<"InventoryItem"> | number
  key?: Prisma.StringNullableFilter<"InventoryItem"> | string | null
  imageUrl?: Prisma.StringNullableFilter<"InventoryItem"> | string | null
  received?: Prisma.BoolFilter<"InventoryItem"> | boolean
  createdAt?: Prisma.DateTimeFilter<"InventoryItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InventoryItem"> | Date | string
  inventoryData?: Prisma.XOR<Prisma.InventoryDataScalarRelationFilter, Prisma.inventoryDataWhereInput>
}, "id">

export type InventoryItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  inventoryDataId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  image?: Prisma.SortOrder
  name?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  upc?: Prisma.SortOrder
  comments?: Prisma.SortOrder
  inbound?: Prisma.SortOrder
  tag?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  cubicQtyPerUnit?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  key?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  received?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InventoryItemCountOrderByAggregateInput
  _avg?: Prisma.InventoryItemAvgOrderByAggregateInput
  _max?: Prisma.InventoryItemMaxOrderByAggregateInput
  _min?: Prisma.InventoryItemMinOrderByAggregateInput
  _sum?: Prisma.InventoryItemSumOrderByAggregateInput
}

export type InventoryItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.InventoryItemScalarWhereWithAggregatesInput | Prisma.InventoryItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.InventoryItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InventoryItemScalarWhereWithAggregatesInput | Prisma.InventoryItemScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"InventoryItem"> | string
  inventoryDataId?: Prisma.StringWithAggregatesFilter<"InventoryItem"> | string
  userId?: Prisma.StringWithAggregatesFilter<"InventoryItem"> | string
  image?: Prisma.StringWithAggregatesFilter<"InventoryItem"> | string
  name?: Prisma.StringWithAggregatesFilter<"InventoryItem"> | string
  sku?: Prisma.StringWithAggregatesFilter<"InventoryItem"> | string
  upc?: Prisma.StringWithAggregatesFilter<"InventoryItem"> | string
  comments?: Prisma.StringWithAggregatesFilter<"InventoryItem"> | string
  inbound?: Prisma.FloatWithAggregatesFilter<"InventoryItem"> | number
  tag?: Prisma.StringWithAggregatesFilter<"InventoryItem"> | string
  weight?: Prisma.FloatWithAggregatesFilter<"InventoryItem"> | number
  cubicQtyPerUnit?: Prisma.FloatWithAggregatesFilter<"InventoryItem"> | number
  stock?: Prisma.IntWithAggregatesFilter<"InventoryItem"> | number
  key?: Prisma.StringNullableWithAggregatesFilter<"InventoryItem"> | string | null
  imageUrl?: Prisma.StringNullableWithAggregatesFilter<"InventoryItem"> | string | null
  received?: Prisma.BoolWithAggregatesFilter<"InventoryItem"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"InventoryItem"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"InventoryItem"> | Date | string
}

export type InventoryItemCreateInput = {
  id?: string
  userId: string
  image: string
  name: string
  sku: string
  upc: string
  comments: string
  inbound: number
  tag: string
  weight: number
  cubicQtyPerUnit?: number
  stock?: number
  key?: string | null
  imageUrl?: string | null
  received?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  inventoryData: Prisma.inventoryDataCreateNestedOneWithoutItemsInput
}

export type InventoryItemUncheckedCreateInput = {
  id?: string
  inventoryDataId: string
  userId: string
  image: string
  name: string
  sku: string
  upc: string
  comments: string
  inbound: number
  tag: string
  weight: number
  cubicQtyPerUnit?: number
  stock?: number
  key?: string | null
  imageUrl?: string | null
  received?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InventoryItemUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  upc?: Prisma.StringFieldUpdateOperationsInput | string
  comments?: Prisma.StringFieldUpdateOperationsInput | string
  inbound?: Prisma.FloatFieldUpdateOperationsInput | number
  tag?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  cubicQtyPerUnit?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  received?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inventoryData?: Prisma.inventoryDataUpdateOneRequiredWithoutItemsNestedInput
}

export type InventoryItemUncheckedUpdateInput = {
  inventoryDataId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  upc?: Prisma.StringFieldUpdateOperationsInput | string
  comments?: Prisma.StringFieldUpdateOperationsInput | string
  inbound?: Prisma.FloatFieldUpdateOperationsInput | number
  tag?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  cubicQtyPerUnit?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  received?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryItemCreateManyInput = {
  id?: string
  inventoryDataId: string
  userId: string
  image: string
  name: string
  sku: string
  upc: string
  comments: string
  inbound: number
  tag: string
  weight: number
  cubicQtyPerUnit?: number
  stock?: number
  key?: string | null
  imageUrl?: string | null
  received?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InventoryItemUpdateManyMutationInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  upc?: Prisma.StringFieldUpdateOperationsInput | string
  comments?: Prisma.StringFieldUpdateOperationsInput | string
  inbound?: Prisma.FloatFieldUpdateOperationsInput | number
  tag?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  cubicQtyPerUnit?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  received?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryItemUncheckedUpdateManyInput = {
  inventoryDataId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  upc?: Prisma.StringFieldUpdateOperationsInput | string
  comments?: Prisma.StringFieldUpdateOperationsInput | string
  inbound?: Prisma.FloatFieldUpdateOperationsInput | number
  tag?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  cubicQtyPerUnit?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  received?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryItemListRelationFilter = {
  every?: Prisma.InventoryItemWhereInput
  some?: Prisma.InventoryItemWhereInput
  none?: Prisma.InventoryItemWhereInput
}

export type InventoryItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type InventoryItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  inventoryDataId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  image?: Prisma.SortOrder
  name?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  upc?: Prisma.SortOrder
  comments?: Prisma.SortOrder
  inbound?: Prisma.SortOrder
  tag?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  cubicQtyPerUnit?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  key?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  received?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InventoryItemAvgOrderByAggregateInput = {
  inbound?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  cubicQtyPerUnit?: Prisma.SortOrder
  stock?: Prisma.SortOrder
}

export type InventoryItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  inventoryDataId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  image?: Prisma.SortOrder
  name?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  upc?: Prisma.SortOrder
  comments?: Prisma.SortOrder
  inbound?: Prisma.SortOrder
  tag?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  cubicQtyPerUnit?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  key?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  received?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InventoryItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  inventoryDataId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  image?: Prisma.SortOrder
  name?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  upc?: Prisma.SortOrder
  comments?: Prisma.SortOrder
  inbound?: Prisma.SortOrder
  tag?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  cubicQtyPerUnit?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  key?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  received?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InventoryItemSumOrderByAggregateInput = {
  inbound?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  cubicQtyPerUnit?: Prisma.SortOrder
  stock?: Prisma.SortOrder
}

export type InventoryItemCreateNestedManyWithoutInventoryDataInput = {
  create?: Prisma.XOR<Prisma.InventoryItemCreateWithoutInventoryDataInput, Prisma.InventoryItemUncheckedCreateWithoutInventoryDataInput> | Prisma.InventoryItemCreateWithoutInventoryDataInput[] | Prisma.InventoryItemUncheckedCreateWithoutInventoryDataInput[]
  connectOrCreate?: Prisma.InventoryItemCreateOrConnectWithoutInventoryDataInput | Prisma.InventoryItemCreateOrConnectWithoutInventoryDataInput[]
  createMany?: Prisma.InventoryItemCreateManyInventoryDataInputEnvelope
  connect?: Prisma.InventoryItemWhereUniqueInput | Prisma.InventoryItemWhereUniqueInput[]
}

export type InventoryItemUncheckedCreateNestedManyWithoutInventoryDataInput = {
  create?: Prisma.XOR<Prisma.InventoryItemCreateWithoutInventoryDataInput, Prisma.InventoryItemUncheckedCreateWithoutInventoryDataInput> | Prisma.InventoryItemCreateWithoutInventoryDataInput[] | Prisma.InventoryItemUncheckedCreateWithoutInventoryDataInput[]
  connectOrCreate?: Prisma.InventoryItemCreateOrConnectWithoutInventoryDataInput | Prisma.InventoryItemCreateOrConnectWithoutInventoryDataInput[]
  createMany?: Prisma.InventoryItemCreateManyInventoryDataInputEnvelope
  connect?: Prisma.InventoryItemWhereUniqueInput | Prisma.InventoryItemWhereUniqueInput[]
}

export type InventoryItemUpdateManyWithoutInventoryDataNestedInput = {
  create?: Prisma.XOR<Prisma.InventoryItemCreateWithoutInventoryDataInput, Prisma.InventoryItemUncheckedCreateWithoutInventoryDataInput> | Prisma.InventoryItemCreateWithoutInventoryDataInput[] | Prisma.InventoryItemUncheckedCreateWithoutInventoryDataInput[]
  connectOrCreate?: Prisma.InventoryItemCreateOrConnectWithoutInventoryDataInput | Prisma.InventoryItemCreateOrConnectWithoutInventoryDataInput[]
  upsert?: Prisma.InventoryItemUpsertWithWhereUniqueWithoutInventoryDataInput | Prisma.InventoryItemUpsertWithWhereUniqueWithoutInventoryDataInput[]
  createMany?: Prisma.InventoryItemCreateManyInventoryDataInputEnvelope
  set?: Prisma.InventoryItemWhereUniqueInput | Prisma.InventoryItemWhereUniqueInput[]
  disconnect?: Prisma.InventoryItemWhereUniqueInput | Prisma.InventoryItemWhereUniqueInput[]
  delete?: Prisma.InventoryItemWhereUniqueInput | Prisma.InventoryItemWhereUniqueInput[]
  connect?: Prisma.InventoryItemWhereUniqueInput | Prisma.InventoryItemWhereUniqueInput[]
  update?: Prisma.InventoryItemUpdateWithWhereUniqueWithoutInventoryDataInput | Prisma.InventoryItemUpdateWithWhereUniqueWithoutInventoryDataInput[]
  updateMany?: Prisma.InventoryItemUpdateManyWithWhereWithoutInventoryDataInput | Prisma.InventoryItemUpdateManyWithWhereWithoutInventoryDataInput[]
  deleteMany?: Prisma.InventoryItemScalarWhereInput | Prisma.InventoryItemScalarWhereInput[]
}

export type InventoryItemUncheckedUpdateManyWithoutInventoryDataNestedInput = {
  create?: Prisma.XOR<Prisma.InventoryItemCreateWithoutInventoryDataInput, Prisma.InventoryItemUncheckedCreateWithoutInventoryDataInput> | Prisma.InventoryItemCreateWithoutInventoryDataInput[] | Prisma.InventoryItemUncheckedCreateWithoutInventoryDataInput[]
  connectOrCreate?: Prisma.InventoryItemCreateOrConnectWithoutInventoryDataInput | Prisma.InventoryItemCreateOrConnectWithoutInventoryDataInput[]
  upsert?: Prisma.InventoryItemUpsertWithWhereUniqueWithoutInventoryDataInput | Prisma.InventoryItemUpsertWithWhereUniqueWithoutInventoryDataInput[]
  createMany?: Prisma.InventoryItemCreateManyInventoryDataInputEnvelope
  set?: Prisma.InventoryItemWhereUniqueInput | Prisma.InventoryItemWhereUniqueInput[]
  disconnect?: Prisma.InventoryItemWhereUniqueInput | Prisma.InventoryItemWhereUniqueInput[]
  delete?: Prisma.InventoryItemWhereUniqueInput | Prisma.InventoryItemWhereUniqueInput[]
  connect?: Prisma.InventoryItemWhereUniqueInput | Prisma.InventoryItemWhereUniqueInput[]
  update?: Prisma.InventoryItemUpdateWithWhereUniqueWithoutInventoryDataInput | Prisma.InventoryItemUpdateWithWhereUniqueWithoutInventoryDataInput[]
  updateMany?: Prisma.InventoryItemUpdateManyWithWhereWithoutInventoryDataInput | Prisma.InventoryItemUpdateManyWithWhereWithoutInventoryDataInput[]
  deleteMany?: Prisma.InventoryItemScalarWhereInput | Prisma.InventoryItemScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type InventoryItemCreateWithoutInventoryDataInput = {
  id?: string
  userId: string
  image: string
  name: string
  sku: string
  upc: string
  comments: string
  inbound: number
  tag: string
  weight: number
  cubicQtyPerUnit?: number
  stock?: number
  key?: string | null
  imageUrl?: string | null
  received?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InventoryItemUncheckedCreateWithoutInventoryDataInput = {
  id?: string
  userId: string
  image: string
  name: string
  sku: string
  upc: string
  comments: string
  inbound: number
  tag: string
  weight: number
  cubicQtyPerUnit?: number
  stock?: number
  key?: string | null
  imageUrl?: string | null
  received?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InventoryItemCreateOrConnectWithoutInventoryDataInput = {
  where: Prisma.InventoryItemWhereUniqueInput
  create: Prisma.XOR<Prisma.InventoryItemCreateWithoutInventoryDataInput, Prisma.InventoryItemUncheckedCreateWithoutInventoryDataInput>
}

export type InventoryItemCreateManyInventoryDataInputEnvelope = {
  data: Prisma.InventoryItemCreateManyInventoryDataInput | Prisma.InventoryItemCreateManyInventoryDataInput[]
}

export type InventoryItemUpsertWithWhereUniqueWithoutInventoryDataInput = {
  where: Prisma.InventoryItemWhereUniqueInput
  update: Prisma.XOR<Prisma.InventoryItemUpdateWithoutInventoryDataInput, Prisma.InventoryItemUncheckedUpdateWithoutInventoryDataInput>
  create: Prisma.XOR<Prisma.InventoryItemCreateWithoutInventoryDataInput, Prisma.InventoryItemUncheckedCreateWithoutInventoryDataInput>
}

export type InventoryItemUpdateWithWhereUniqueWithoutInventoryDataInput = {
  where: Prisma.InventoryItemWhereUniqueInput
  data: Prisma.XOR<Prisma.InventoryItemUpdateWithoutInventoryDataInput, Prisma.InventoryItemUncheckedUpdateWithoutInventoryDataInput>
}

export type InventoryItemUpdateManyWithWhereWithoutInventoryDataInput = {
  where: Prisma.InventoryItemScalarWhereInput
  data: Prisma.XOR<Prisma.InventoryItemUpdateManyMutationInput, Prisma.InventoryItemUncheckedUpdateManyWithoutInventoryDataInput>
}

export type InventoryItemScalarWhereInput = {
  AND?: Prisma.InventoryItemScalarWhereInput | Prisma.InventoryItemScalarWhereInput[]
  OR?: Prisma.InventoryItemScalarWhereInput[]
  NOT?: Prisma.InventoryItemScalarWhereInput | Prisma.InventoryItemScalarWhereInput[]
  id?: Prisma.StringFilter<"InventoryItem"> | string
  inventoryDataId?: Prisma.StringFilter<"InventoryItem"> | string
  userId?: Prisma.StringFilter<"InventoryItem"> | string
  image?: Prisma.StringFilter<"InventoryItem"> | string
  name?: Prisma.StringFilter<"InventoryItem"> | string
  sku?: Prisma.StringFilter<"InventoryItem"> | string
  upc?: Prisma.StringFilter<"InventoryItem"> | string
  comments?: Prisma.StringFilter<"InventoryItem"> | string
  inbound?: Prisma.FloatFilter<"InventoryItem"> | number
  tag?: Prisma.StringFilter<"InventoryItem"> | string
  weight?: Prisma.FloatFilter<"InventoryItem"> | number
  cubicQtyPerUnit?: Prisma.FloatFilter<"InventoryItem"> | number
  stock?: Prisma.IntFilter<"InventoryItem"> | number
  key?: Prisma.StringNullableFilter<"InventoryItem"> | string | null
  imageUrl?: Prisma.StringNullableFilter<"InventoryItem"> | string | null
  received?: Prisma.BoolFilter<"InventoryItem"> | boolean
  createdAt?: Prisma.DateTimeFilter<"InventoryItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InventoryItem"> | Date | string
}

export type InventoryItemCreateManyInventoryDataInput = {
  id?: string
  userId: string
  image: string
  name: string
  sku: string
  upc: string
  comments: string
  inbound: number
  tag: string
  weight: number
  cubicQtyPerUnit?: number
  stock?: number
  key?: string | null
  imageUrl?: string | null
  received?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InventoryItemUpdateWithoutInventoryDataInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  upc?: Prisma.StringFieldUpdateOperationsInput | string
  comments?: Prisma.StringFieldUpdateOperationsInput | string
  inbound?: Prisma.FloatFieldUpdateOperationsInput | number
  tag?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  cubicQtyPerUnit?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  received?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryItemUncheckedUpdateWithoutInventoryDataInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  upc?: Prisma.StringFieldUpdateOperationsInput | string
  comments?: Prisma.StringFieldUpdateOperationsInput | string
  inbound?: Prisma.FloatFieldUpdateOperationsInput | number
  tag?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  cubicQtyPerUnit?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  received?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryItemUncheckedUpdateManyWithoutInventoryDataInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  upc?: Prisma.StringFieldUpdateOperationsInput | string
  comments?: Prisma.StringFieldUpdateOperationsInput | string
  inbound?: Prisma.FloatFieldUpdateOperationsInput | number
  tag?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.FloatFieldUpdateOperationsInput | number
  cubicQtyPerUnit?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  received?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type InventoryItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  inventoryDataId?: boolean
  userId?: boolean
  image?: boolean
  name?: boolean
  sku?: boolean
  upc?: boolean
  comments?: boolean
  inbound?: boolean
  tag?: boolean
  weight?: boolean
  cubicQtyPerUnit?: boolean
  stock?: boolean
  key?: boolean
  imageUrl?: boolean
  received?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  inventoryData?: boolean | Prisma.inventoryDataDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inventoryItem"]>



export type InventoryItemSelectScalar = {
  id?: boolean
  inventoryDataId?: boolean
  userId?: boolean
  image?: boolean
  name?: boolean
  sku?: boolean
  upc?: boolean
  comments?: boolean
  inbound?: boolean
  tag?: boolean
  weight?: boolean
  cubicQtyPerUnit?: boolean
  stock?: boolean
  key?: boolean
  imageUrl?: boolean
  received?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InventoryItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "inventoryDataId" | "userId" | "image" | "name" | "sku" | "upc" | "comments" | "inbound" | "tag" | "weight" | "cubicQtyPerUnit" | "stock" | "key" | "imageUrl" | "received" | "createdAt" | "updatedAt", ExtArgs["result"]["inventoryItem"]>
export type InventoryItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  inventoryData?: boolean | Prisma.inventoryDataDefaultArgs<ExtArgs>
}

export type $InventoryItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InventoryItem"
  objects: {
    inventoryData: Prisma.$inventoryDataPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    inventoryDataId: string
    userId: string
    image: string
    name: string
    sku: string
    upc: string
    comments: string
    inbound: number
    tag: string
    weight: number
    cubicQtyPerUnit: number
    stock: number
    key: string | null
    imageUrl: string | null
    received: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["inventoryItem"]>
  composites: {}
}

export type InventoryItemGetPayload<S extends boolean | null | undefined | InventoryItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InventoryItemPayload, S>

export type InventoryItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InventoryItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InventoryItemCountAggregateInputType | true
  }

export interface InventoryItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryItem'], meta: { name: 'InventoryItem' } }
  /**
   * Find zero or one InventoryItem that matches the filter.
   * @param {InventoryItemFindUniqueArgs} args - Arguments to find a InventoryItem
   * @example
   * // Get one InventoryItem
   * const inventoryItem = await prisma.inventoryItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InventoryItemFindUniqueArgs>(args: Prisma.SelectSubset<T, InventoryItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InventoryItemClient<runtime.Types.Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InventoryItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InventoryItemFindUniqueOrThrowArgs} args - Arguments to find a InventoryItem
   * @example
   * // Get one InventoryItem
   * const inventoryItem = await prisma.inventoryItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InventoryItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InventoryItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InventoryItemClient<runtime.Types.Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InventoryItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryItemFindFirstArgs} args - Arguments to find a InventoryItem
   * @example
   * // Get one InventoryItem
   * const inventoryItem = await prisma.inventoryItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InventoryItemFindFirstArgs>(args?: Prisma.SelectSubset<T, InventoryItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__InventoryItemClient<runtime.Types.Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InventoryItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryItemFindFirstOrThrowArgs} args - Arguments to find a InventoryItem
   * @example
   * // Get one InventoryItem
   * const inventoryItem = await prisma.inventoryItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InventoryItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InventoryItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InventoryItemClient<runtime.Types.Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InventoryItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InventoryItems
   * const inventoryItems = await prisma.inventoryItem.findMany()
   * 
   * // Get first 10 InventoryItems
   * const inventoryItems = await prisma.inventoryItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const inventoryItemWithIdOnly = await prisma.inventoryItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InventoryItemFindManyArgs>(args?: Prisma.SelectSubset<T, InventoryItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InventoryItem.
   * @param {InventoryItemCreateArgs} args - Arguments to create a InventoryItem.
   * @example
   * // Create one InventoryItem
   * const InventoryItem = await prisma.inventoryItem.create({
   *   data: {
   *     // ... data to create a InventoryItem
   *   }
   * })
   * 
   */
  create<T extends InventoryItemCreateArgs>(args: Prisma.SelectSubset<T, InventoryItemCreateArgs<ExtArgs>>): Prisma.Prisma__InventoryItemClient<runtime.Types.Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InventoryItems.
   * @param {InventoryItemCreateManyArgs} args - Arguments to create many InventoryItems.
   * @example
   * // Create many InventoryItems
   * const inventoryItem = await prisma.inventoryItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InventoryItemCreateManyArgs>(args?: Prisma.SelectSubset<T, InventoryItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a InventoryItem.
   * @param {InventoryItemDeleteArgs} args - Arguments to delete one InventoryItem.
   * @example
   * // Delete one InventoryItem
   * const InventoryItem = await prisma.inventoryItem.delete({
   *   where: {
   *     // ... filter to delete one InventoryItem
   *   }
   * })
   * 
   */
  delete<T extends InventoryItemDeleteArgs>(args: Prisma.SelectSubset<T, InventoryItemDeleteArgs<ExtArgs>>): Prisma.Prisma__InventoryItemClient<runtime.Types.Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InventoryItem.
   * @param {InventoryItemUpdateArgs} args - Arguments to update one InventoryItem.
   * @example
   * // Update one InventoryItem
   * const inventoryItem = await prisma.inventoryItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InventoryItemUpdateArgs>(args: Prisma.SelectSubset<T, InventoryItemUpdateArgs<ExtArgs>>): Prisma.Prisma__InventoryItemClient<runtime.Types.Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InventoryItems.
   * @param {InventoryItemDeleteManyArgs} args - Arguments to filter InventoryItems to delete.
   * @example
   * // Delete a few InventoryItems
   * const { count } = await prisma.inventoryItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InventoryItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, InventoryItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InventoryItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InventoryItems
   * const inventoryItem = await prisma.inventoryItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InventoryItemUpdateManyArgs>(args: Prisma.SelectSubset<T, InventoryItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one InventoryItem.
   * @param {InventoryItemUpsertArgs} args - Arguments to update or create a InventoryItem.
   * @example
   * // Update or create a InventoryItem
   * const inventoryItem = await prisma.inventoryItem.upsert({
   *   create: {
   *     // ... data to create a InventoryItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InventoryItem we want to update
   *   }
   * })
   */
  upsert<T extends InventoryItemUpsertArgs>(args: Prisma.SelectSubset<T, InventoryItemUpsertArgs<ExtArgs>>): Prisma.Prisma__InventoryItemClient<runtime.Types.Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InventoryItems that matches the filter.
   * @param {InventoryItemFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const inventoryItem = await prisma.inventoryItem.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.InventoryItemFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a InventoryItem.
   * @param {InventoryItemAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const inventoryItem = await prisma.inventoryItem.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.InventoryItemAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of InventoryItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryItemCountArgs} args - Arguments to filter InventoryItems to count.
   * @example
   * // Count the number of InventoryItems
   * const count = await prisma.inventoryItem.count({
   *   where: {
   *     // ... the filter for the InventoryItems we want to count
   *   }
   * })
  **/
  count<T extends InventoryItemCountArgs>(
    args?: Prisma.Subset<T, InventoryItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InventoryItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InventoryItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InventoryItemAggregateArgs>(args: Prisma.Subset<T, InventoryItemAggregateArgs>): Prisma.PrismaPromise<GetInventoryItemAggregateType<T>>

  /**
   * Group by InventoryItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InventoryItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InventoryItemGroupByArgs['orderBy'] }
      : { orderBy?: InventoryItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InventoryItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InventoryItem model
 */
readonly fields: InventoryItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InventoryItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InventoryItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  inventoryData<T extends Prisma.inventoryDataDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.inventoryDataDefaultArgs<ExtArgs>>): Prisma.Prisma__inventoryDataClient<runtime.Types.Result.GetResult<Prisma.$inventoryDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InventoryItem model
 */
export interface InventoryItemFieldRefs {
  readonly id: Prisma.FieldRef<"InventoryItem", 'String'>
  readonly inventoryDataId: Prisma.FieldRef<"InventoryItem", 'String'>
  readonly userId: Prisma.FieldRef<"InventoryItem", 'String'>
  readonly image: Prisma.FieldRef<"InventoryItem", 'String'>
  readonly name: Prisma.FieldRef<"InventoryItem", 'String'>
  readonly sku: Prisma.FieldRef<"InventoryItem", 'String'>
  readonly upc: Prisma.FieldRef<"InventoryItem", 'String'>
  readonly comments: Prisma.FieldRef<"InventoryItem", 'String'>
  readonly inbound: Prisma.FieldRef<"InventoryItem", 'Float'>
  readonly tag: Prisma.FieldRef<"InventoryItem", 'String'>
  readonly weight: Prisma.FieldRef<"InventoryItem", 'Float'>
  readonly cubicQtyPerUnit: Prisma.FieldRef<"InventoryItem", 'Float'>
  readonly stock: Prisma.FieldRef<"InventoryItem", 'Int'>
  readonly key: Prisma.FieldRef<"InventoryItem", 'String'>
  readonly imageUrl: Prisma.FieldRef<"InventoryItem", 'String'>
  readonly received: Prisma.FieldRef<"InventoryItem", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"InventoryItem", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"InventoryItem", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InventoryItem findUnique
 */
export type InventoryItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryItem
   */
  select?: Prisma.InventoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryItem
   */
  omit?: Prisma.InventoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryItemInclude<ExtArgs> | null
  /**
   * Filter, which InventoryItem to fetch.
   */
  where: Prisma.InventoryItemWhereUniqueInput
}

/**
 * InventoryItem findUniqueOrThrow
 */
export type InventoryItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryItem
   */
  select?: Prisma.InventoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryItem
   */
  omit?: Prisma.InventoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryItemInclude<ExtArgs> | null
  /**
   * Filter, which InventoryItem to fetch.
   */
  where: Prisma.InventoryItemWhereUniqueInput
}

/**
 * InventoryItem findFirst
 */
export type InventoryItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryItem
   */
  select?: Prisma.InventoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryItem
   */
  omit?: Prisma.InventoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryItemInclude<ExtArgs> | null
  /**
   * Filter, which InventoryItem to fetch.
   */
  where?: Prisma.InventoryItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InventoryItems to fetch.
   */
  orderBy?: Prisma.InventoryItemOrderByWithRelationInput | Prisma.InventoryItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InventoryItems.
   */
  cursor?: Prisma.InventoryItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InventoryItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InventoryItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InventoryItems.
   */
  distinct?: Prisma.InventoryItemScalarFieldEnum | Prisma.InventoryItemScalarFieldEnum[]
}

/**
 * InventoryItem findFirstOrThrow
 */
export type InventoryItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryItem
   */
  select?: Prisma.InventoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryItem
   */
  omit?: Prisma.InventoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryItemInclude<ExtArgs> | null
  /**
   * Filter, which InventoryItem to fetch.
   */
  where?: Prisma.InventoryItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InventoryItems to fetch.
   */
  orderBy?: Prisma.InventoryItemOrderByWithRelationInput | Prisma.InventoryItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InventoryItems.
   */
  cursor?: Prisma.InventoryItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InventoryItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InventoryItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InventoryItems.
   */
  distinct?: Prisma.InventoryItemScalarFieldEnum | Prisma.InventoryItemScalarFieldEnum[]
}

/**
 * InventoryItem findMany
 */
export type InventoryItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryItem
   */
  select?: Prisma.InventoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryItem
   */
  omit?: Prisma.InventoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryItemInclude<ExtArgs> | null
  /**
   * Filter, which InventoryItems to fetch.
   */
  where?: Prisma.InventoryItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InventoryItems to fetch.
   */
  orderBy?: Prisma.InventoryItemOrderByWithRelationInput | Prisma.InventoryItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InventoryItems.
   */
  cursor?: Prisma.InventoryItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InventoryItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InventoryItems.
   */
  skip?: number
  distinct?: Prisma.InventoryItemScalarFieldEnum | Prisma.InventoryItemScalarFieldEnum[]
}

/**
 * InventoryItem create
 */
export type InventoryItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryItem
   */
  select?: Prisma.InventoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryItem
   */
  omit?: Prisma.InventoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryItemInclude<ExtArgs> | null
  /**
   * The data needed to create a InventoryItem.
   */
  data: Prisma.XOR<Prisma.InventoryItemCreateInput, Prisma.InventoryItemUncheckedCreateInput>
}

/**
 * InventoryItem createMany
 */
export type InventoryItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InventoryItems.
   */
  data: Prisma.InventoryItemCreateManyInput | Prisma.InventoryItemCreateManyInput[]
}

/**
 * InventoryItem update
 */
export type InventoryItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryItem
   */
  select?: Prisma.InventoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryItem
   */
  omit?: Prisma.InventoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryItemInclude<ExtArgs> | null
  /**
   * The data needed to update a InventoryItem.
   */
  data: Prisma.XOR<Prisma.InventoryItemUpdateInput, Prisma.InventoryItemUncheckedUpdateInput>
  /**
   * Choose, which InventoryItem to update.
   */
  where: Prisma.InventoryItemWhereUniqueInput
}

/**
 * InventoryItem updateMany
 */
export type InventoryItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InventoryItems.
   */
  data: Prisma.XOR<Prisma.InventoryItemUpdateManyMutationInput, Prisma.InventoryItemUncheckedUpdateManyInput>
  /**
   * Filter which InventoryItems to update
   */
  where?: Prisma.InventoryItemWhereInput
  /**
   * Limit how many InventoryItems to update.
   */
  limit?: number
}

/**
 * InventoryItem upsert
 */
export type InventoryItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryItem
   */
  select?: Prisma.InventoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryItem
   */
  omit?: Prisma.InventoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryItemInclude<ExtArgs> | null
  /**
   * The filter to search for the InventoryItem to update in case it exists.
   */
  where: Prisma.InventoryItemWhereUniqueInput
  /**
   * In case the InventoryItem found by the `where` argument doesn't exist, create a new InventoryItem with this data.
   */
  create: Prisma.XOR<Prisma.InventoryItemCreateInput, Prisma.InventoryItemUncheckedCreateInput>
  /**
   * In case the InventoryItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InventoryItemUpdateInput, Prisma.InventoryItemUncheckedUpdateInput>
}

/**
 * InventoryItem delete
 */
export type InventoryItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryItem
   */
  select?: Prisma.InventoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryItem
   */
  omit?: Prisma.InventoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryItemInclude<ExtArgs> | null
  /**
   * Filter which InventoryItem to delete.
   */
  where: Prisma.InventoryItemWhereUniqueInput
}

/**
 * InventoryItem deleteMany
 */
export type InventoryItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InventoryItems to delete
   */
  where?: Prisma.InventoryItemWhereInput
  /**
   * Limit how many InventoryItems to delete.
   */
  limit?: number
}

/**
 * InventoryItem findRaw
 */
export type InventoryItemFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * InventoryItem aggregateRaw
 */
export type InventoryItemAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * InventoryItem without action
 */
export type InventoryItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryItem
   */
  select?: Prisma.InventoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryItem
   */
  omit?: Prisma.InventoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryItemInclude<ExtArgs> | null
}
