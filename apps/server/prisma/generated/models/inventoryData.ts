
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `inventoryData` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model inventoryData
 * 
 */
export type inventoryDataModel = runtime.Types.Result.DefaultSelection<Prisma.$inventoryDataPayload>

export type AggregateInventoryData = {
  _count: InventoryDataCountAggregateOutputType | null
  _min: InventoryDataMinAggregateOutputType | null
  _max: InventoryDataMaxAggregateOutputType | null
}

export type InventoryDataMinAggregateOutputType = {
  id: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InventoryDataMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InventoryDataCountAggregateOutputType = {
  id: number
  userId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InventoryDataMinAggregateInputType = {
  id?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type InventoryDataMaxAggregateInputType = {
  id?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type InventoryDataCountAggregateInputType = {
  id?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InventoryDataAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which inventoryData to aggregate.
   */
  where?: Prisma.inventoryDataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of inventoryData to fetch.
   */
  orderBy?: Prisma.inventoryDataOrderByWithRelationInput | Prisma.inventoryDataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.inventoryDataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` inventoryData from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` inventoryData.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned inventoryData
  **/
  _count?: true | InventoryDataCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InventoryDataMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InventoryDataMaxAggregateInputType
}

export type GetInventoryDataAggregateType<T extends InventoryDataAggregateArgs> = {
      [P in keyof T & keyof AggregateInventoryData]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInventoryData[P]>
    : Prisma.GetScalarType<T[P], AggregateInventoryData[P]>
}




export type inventoryDataGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.inventoryDataWhereInput
  orderBy?: Prisma.inventoryDataOrderByWithAggregationInput | Prisma.inventoryDataOrderByWithAggregationInput[]
  by: Prisma.InventoryDataScalarFieldEnum[] | Prisma.InventoryDataScalarFieldEnum
  having?: Prisma.inventoryDataScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InventoryDataCountAggregateInputType | true
  _min?: InventoryDataMinAggregateInputType
  _max?: InventoryDataMaxAggregateInputType
}

export type InventoryDataGroupByOutputType = {
  id: string
  userId: string
  createdAt: Date
  updatedAt: Date
  _count: InventoryDataCountAggregateOutputType | null
  _min: InventoryDataMinAggregateOutputType | null
  _max: InventoryDataMaxAggregateOutputType | null
}

type GetInventoryDataGroupByPayload<T extends inventoryDataGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InventoryDataGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InventoryDataGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InventoryDataGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InventoryDataGroupByOutputType[P]>
      }
    >
  > 



export type inventoryDataWhereInput = {
  AND?: Prisma.inventoryDataWhereInput | Prisma.inventoryDataWhereInput[]
  OR?: Prisma.inventoryDataWhereInput[]
  NOT?: Prisma.inventoryDataWhereInput | Prisma.inventoryDataWhereInput[]
  id?: Prisma.StringFilter<"inventoryData"> | string
  userId?: Prisma.StringFilter<"inventoryData"> | string
  createdAt?: Prisma.DateTimeFilter<"inventoryData"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"inventoryData"> | Date | string
  items?: Prisma.InventoryItemListRelationFilter
}

export type inventoryDataOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  items?: Prisma.InventoryItemOrderByRelationAggregateInput
}

export type inventoryDataWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.inventoryDataWhereInput | Prisma.inventoryDataWhereInput[]
  OR?: Prisma.inventoryDataWhereInput[]
  NOT?: Prisma.inventoryDataWhereInput | Prisma.inventoryDataWhereInput[]
  userId?: Prisma.StringFilter<"inventoryData"> | string
  createdAt?: Prisma.DateTimeFilter<"inventoryData"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"inventoryData"> | Date | string
  items?: Prisma.InventoryItemListRelationFilter
}, "id">

export type inventoryDataOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.inventoryDataCountOrderByAggregateInput
  _max?: Prisma.inventoryDataMaxOrderByAggregateInput
  _min?: Prisma.inventoryDataMinOrderByAggregateInput
}

export type inventoryDataScalarWhereWithAggregatesInput = {
  AND?: Prisma.inventoryDataScalarWhereWithAggregatesInput | Prisma.inventoryDataScalarWhereWithAggregatesInput[]
  OR?: Prisma.inventoryDataScalarWhereWithAggregatesInput[]
  NOT?: Prisma.inventoryDataScalarWhereWithAggregatesInput | Prisma.inventoryDataScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"inventoryData"> | string
  userId?: Prisma.StringWithAggregatesFilter<"inventoryData"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"inventoryData"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"inventoryData"> | Date | string
}

export type inventoryDataCreateInput = {
  id?: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.InventoryItemCreateNestedManyWithoutInventoryDataInput
}

export type inventoryDataUncheckedCreateInput = {
  id?: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.InventoryItemUncheckedCreateNestedManyWithoutInventoryDataInput
}

export type inventoryDataUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.InventoryItemUpdateManyWithoutInventoryDataNestedInput
}

export type inventoryDataUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.InventoryItemUncheckedUpdateManyWithoutInventoryDataNestedInput
}

export type inventoryDataCreateManyInput = {
  id?: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type inventoryDataUpdateManyMutationInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type inventoryDataUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type inventoryDataCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type inventoryDataMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type inventoryDataMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InventoryDataScalarRelationFilter = {
  is?: Prisma.inventoryDataWhereInput
  isNot?: Prisma.inventoryDataWhereInput
}

export type inventoryDataCreateNestedOneWithoutItemsInput = {
  create?: Prisma.XOR<Prisma.inventoryDataCreateWithoutItemsInput, Prisma.inventoryDataUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.inventoryDataCreateOrConnectWithoutItemsInput
  connect?: Prisma.inventoryDataWhereUniqueInput
}

export type inventoryDataUpdateOneRequiredWithoutItemsNestedInput = {
  create?: Prisma.XOR<Prisma.inventoryDataCreateWithoutItemsInput, Prisma.inventoryDataUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.inventoryDataCreateOrConnectWithoutItemsInput
  upsert?: Prisma.inventoryDataUpsertWithoutItemsInput
  connect?: Prisma.inventoryDataWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.inventoryDataUpdateToOneWithWhereWithoutItemsInput, Prisma.inventoryDataUpdateWithoutItemsInput>, Prisma.inventoryDataUncheckedUpdateWithoutItemsInput>
}

export type inventoryDataCreateWithoutItemsInput = {
  id?: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type inventoryDataUncheckedCreateWithoutItemsInput = {
  id?: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type inventoryDataCreateOrConnectWithoutItemsInput = {
  where: Prisma.inventoryDataWhereUniqueInput
  create: Prisma.XOR<Prisma.inventoryDataCreateWithoutItemsInput, Prisma.inventoryDataUncheckedCreateWithoutItemsInput>
}

export type inventoryDataUpsertWithoutItemsInput = {
  update: Prisma.XOR<Prisma.inventoryDataUpdateWithoutItemsInput, Prisma.inventoryDataUncheckedUpdateWithoutItemsInput>
  create: Prisma.XOR<Prisma.inventoryDataCreateWithoutItemsInput, Prisma.inventoryDataUncheckedCreateWithoutItemsInput>
  where?: Prisma.inventoryDataWhereInput
}

export type inventoryDataUpdateToOneWithWhereWithoutItemsInput = {
  where?: Prisma.inventoryDataWhereInput
  data: Prisma.XOR<Prisma.inventoryDataUpdateWithoutItemsInput, Prisma.inventoryDataUncheckedUpdateWithoutItemsInput>
}

export type inventoryDataUpdateWithoutItemsInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type inventoryDataUncheckedUpdateWithoutItemsInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type InventoryDataCountOutputType
 */

export type InventoryDataCountOutputType = {
  items: number
}

export type InventoryDataCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  items?: boolean | InventoryDataCountOutputTypeCountItemsArgs
}

/**
 * InventoryDataCountOutputType without action
 */
export type InventoryDataCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryDataCountOutputType
   */
  select?: Prisma.InventoryDataCountOutputTypeSelect<ExtArgs> | null
}

/**
 * InventoryDataCountOutputType without action
 */
export type InventoryDataCountOutputTypeCountItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InventoryItemWhereInput
}


export type inventoryDataSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  items?: boolean | Prisma.inventoryData$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.InventoryDataCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inventoryData"]>



export type inventoryDataSelectScalar = {
  id?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type inventoryDataOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["inventoryData"]>
export type inventoryDataInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  items?: boolean | Prisma.inventoryData$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.InventoryDataCountOutputTypeDefaultArgs<ExtArgs>
}

export type $inventoryDataPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "inventoryData"
  objects: {
    items: Prisma.$InventoryItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["inventoryData"]>
  composites: {}
}

export type inventoryDataGetPayload<S extends boolean | null | undefined | inventoryDataDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$inventoryDataPayload, S>

export type inventoryDataCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<inventoryDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InventoryDataCountAggregateInputType | true
  }

export interface inventoryDataDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['inventoryData'], meta: { name: 'inventoryData' } }
  /**
   * Find zero or one InventoryData that matches the filter.
   * @param {inventoryDataFindUniqueArgs} args - Arguments to find a InventoryData
   * @example
   * // Get one InventoryData
   * const inventoryData = await prisma.inventoryData.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends inventoryDataFindUniqueArgs>(args: Prisma.SelectSubset<T, inventoryDataFindUniqueArgs<ExtArgs>>): Prisma.Prisma__inventoryDataClient<runtime.Types.Result.GetResult<Prisma.$inventoryDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InventoryData that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {inventoryDataFindUniqueOrThrowArgs} args - Arguments to find a InventoryData
   * @example
   * // Get one InventoryData
   * const inventoryData = await prisma.inventoryData.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends inventoryDataFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, inventoryDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__inventoryDataClient<runtime.Types.Result.GetResult<Prisma.$inventoryDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InventoryData that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {inventoryDataFindFirstArgs} args - Arguments to find a InventoryData
   * @example
   * // Get one InventoryData
   * const inventoryData = await prisma.inventoryData.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends inventoryDataFindFirstArgs>(args?: Prisma.SelectSubset<T, inventoryDataFindFirstArgs<ExtArgs>>): Prisma.Prisma__inventoryDataClient<runtime.Types.Result.GetResult<Prisma.$inventoryDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InventoryData that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {inventoryDataFindFirstOrThrowArgs} args - Arguments to find a InventoryData
   * @example
   * // Get one InventoryData
   * const inventoryData = await prisma.inventoryData.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends inventoryDataFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, inventoryDataFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__inventoryDataClient<runtime.Types.Result.GetResult<Prisma.$inventoryDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InventoryData that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {inventoryDataFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InventoryData
   * const inventoryData = await prisma.inventoryData.findMany()
   * 
   * // Get first 10 InventoryData
   * const inventoryData = await prisma.inventoryData.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const inventoryDataWithIdOnly = await prisma.inventoryData.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends inventoryDataFindManyArgs>(args?: Prisma.SelectSubset<T, inventoryDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$inventoryDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InventoryData.
   * @param {inventoryDataCreateArgs} args - Arguments to create a InventoryData.
   * @example
   * // Create one InventoryData
   * const InventoryData = await prisma.inventoryData.create({
   *   data: {
   *     // ... data to create a InventoryData
   *   }
   * })
   * 
   */
  create<T extends inventoryDataCreateArgs>(args: Prisma.SelectSubset<T, inventoryDataCreateArgs<ExtArgs>>): Prisma.Prisma__inventoryDataClient<runtime.Types.Result.GetResult<Prisma.$inventoryDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InventoryData.
   * @param {inventoryDataCreateManyArgs} args - Arguments to create many InventoryData.
   * @example
   * // Create many InventoryData
   * const inventoryData = await prisma.inventoryData.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends inventoryDataCreateManyArgs>(args?: Prisma.SelectSubset<T, inventoryDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a InventoryData.
   * @param {inventoryDataDeleteArgs} args - Arguments to delete one InventoryData.
   * @example
   * // Delete one InventoryData
   * const InventoryData = await prisma.inventoryData.delete({
   *   where: {
   *     // ... filter to delete one InventoryData
   *   }
   * })
   * 
   */
  delete<T extends inventoryDataDeleteArgs>(args: Prisma.SelectSubset<T, inventoryDataDeleteArgs<ExtArgs>>): Prisma.Prisma__inventoryDataClient<runtime.Types.Result.GetResult<Prisma.$inventoryDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InventoryData.
   * @param {inventoryDataUpdateArgs} args - Arguments to update one InventoryData.
   * @example
   * // Update one InventoryData
   * const inventoryData = await prisma.inventoryData.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends inventoryDataUpdateArgs>(args: Prisma.SelectSubset<T, inventoryDataUpdateArgs<ExtArgs>>): Prisma.Prisma__inventoryDataClient<runtime.Types.Result.GetResult<Prisma.$inventoryDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InventoryData.
   * @param {inventoryDataDeleteManyArgs} args - Arguments to filter InventoryData to delete.
   * @example
   * // Delete a few InventoryData
   * const { count } = await prisma.inventoryData.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends inventoryDataDeleteManyArgs>(args?: Prisma.SelectSubset<T, inventoryDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InventoryData.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {inventoryDataUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InventoryData
   * const inventoryData = await prisma.inventoryData.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends inventoryDataUpdateManyArgs>(args: Prisma.SelectSubset<T, inventoryDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one InventoryData.
   * @param {inventoryDataUpsertArgs} args - Arguments to update or create a InventoryData.
   * @example
   * // Update or create a InventoryData
   * const inventoryData = await prisma.inventoryData.upsert({
   *   create: {
   *     // ... data to create a InventoryData
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InventoryData we want to update
   *   }
   * })
   */
  upsert<T extends inventoryDataUpsertArgs>(args: Prisma.SelectSubset<T, inventoryDataUpsertArgs<ExtArgs>>): Prisma.Prisma__inventoryDataClient<runtime.Types.Result.GetResult<Prisma.$inventoryDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InventoryData that matches the filter.
   * @param {inventoryDataFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const inventoryData = await prisma.inventoryData.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.inventoryDataFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a InventoryData.
   * @param {inventoryDataAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const inventoryData = await prisma.inventoryData.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.inventoryDataAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of InventoryData.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {inventoryDataCountArgs} args - Arguments to filter InventoryData to count.
   * @example
   * // Count the number of InventoryData
   * const count = await prisma.inventoryData.count({
   *   where: {
   *     // ... the filter for the InventoryData we want to count
   *   }
   * })
  **/
  count<T extends inventoryDataCountArgs>(
    args?: Prisma.Subset<T, inventoryDataCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InventoryDataCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InventoryData.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InventoryDataAggregateArgs>(args: Prisma.Subset<T, InventoryDataAggregateArgs>): Prisma.PrismaPromise<GetInventoryDataAggregateType<T>>

  /**
   * Group by InventoryData.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {inventoryDataGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends inventoryDataGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: inventoryDataGroupByArgs['orderBy'] }
      : { orderBy?: inventoryDataGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, inventoryDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the inventoryData model
 */
readonly fields: inventoryDataFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for inventoryData.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__inventoryDataClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  items<T extends Prisma.inventoryData$itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.inventoryData$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the inventoryData model
 */
export interface inventoryDataFieldRefs {
  readonly id: Prisma.FieldRef<"inventoryData", 'String'>
  readonly userId: Prisma.FieldRef<"inventoryData", 'String'>
  readonly createdAt: Prisma.FieldRef<"inventoryData", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"inventoryData", 'DateTime'>
}
    

// Custom InputTypes
/**
 * inventoryData findUnique
 */
export type inventoryDataFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the inventoryData
   */
  select?: Prisma.inventoryDataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the inventoryData
   */
  omit?: Prisma.inventoryDataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.inventoryDataInclude<ExtArgs> | null
  /**
   * Filter, which inventoryData to fetch.
   */
  where: Prisma.inventoryDataWhereUniqueInput
}

/**
 * inventoryData findUniqueOrThrow
 */
export type inventoryDataFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the inventoryData
   */
  select?: Prisma.inventoryDataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the inventoryData
   */
  omit?: Prisma.inventoryDataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.inventoryDataInclude<ExtArgs> | null
  /**
   * Filter, which inventoryData to fetch.
   */
  where: Prisma.inventoryDataWhereUniqueInput
}

/**
 * inventoryData findFirst
 */
export type inventoryDataFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the inventoryData
   */
  select?: Prisma.inventoryDataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the inventoryData
   */
  omit?: Prisma.inventoryDataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.inventoryDataInclude<ExtArgs> | null
  /**
   * Filter, which inventoryData to fetch.
   */
  where?: Prisma.inventoryDataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of inventoryData to fetch.
   */
  orderBy?: Prisma.inventoryDataOrderByWithRelationInput | Prisma.inventoryDataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for inventoryData.
   */
  cursor?: Prisma.inventoryDataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` inventoryData from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` inventoryData.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of inventoryData.
   */
  distinct?: Prisma.InventoryDataScalarFieldEnum | Prisma.InventoryDataScalarFieldEnum[]
}

/**
 * inventoryData findFirstOrThrow
 */
export type inventoryDataFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the inventoryData
   */
  select?: Prisma.inventoryDataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the inventoryData
   */
  omit?: Prisma.inventoryDataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.inventoryDataInclude<ExtArgs> | null
  /**
   * Filter, which inventoryData to fetch.
   */
  where?: Prisma.inventoryDataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of inventoryData to fetch.
   */
  orderBy?: Prisma.inventoryDataOrderByWithRelationInput | Prisma.inventoryDataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for inventoryData.
   */
  cursor?: Prisma.inventoryDataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` inventoryData from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` inventoryData.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of inventoryData.
   */
  distinct?: Prisma.InventoryDataScalarFieldEnum | Prisma.InventoryDataScalarFieldEnum[]
}

/**
 * inventoryData findMany
 */
export type inventoryDataFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the inventoryData
   */
  select?: Prisma.inventoryDataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the inventoryData
   */
  omit?: Prisma.inventoryDataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.inventoryDataInclude<ExtArgs> | null
  /**
   * Filter, which inventoryData to fetch.
   */
  where?: Prisma.inventoryDataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of inventoryData to fetch.
   */
  orderBy?: Prisma.inventoryDataOrderByWithRelationInput | Prisma.inventoryDataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing inventoryData.
   */
  cursor?: Prisma.inventoryDataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` inventoryData from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` inventoryData.
   */
  skip?: number
  distinct?: Prisma.InventoryDataScalarFieldEnum | Prisma.InventoryDataScalarFieldEnum[]
}

/**
 * inventoryData create
 */
export type inventoryDataCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the inventoryData
   */
  select?: Prisma.inventoryDataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the inventoryData
   */
  omit?: Prisma.inventoryDataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.inventoryDataInclude<ExtArgs> | null
  /**
   * The data needed to create a inventoryData.
   */
  data: Prisma.XOR<Prisma.inventoryDataCreateInput, Prisma.inventoryDataUncheckedCreateInput>
}

/**
 * inventoryData createMany
 */
export type inventoryDataCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many inventoryData.
   */
  data: Prisma.inventoryDataCreateManyInput | Prisma.inventoryDataCreateManyInput[]
}

/**
 * inventoryData update
 */
export type inventoryDataUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the inventoryData
   */
  select?: Prisma.inventoryDataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the inventoryData
   */
  omit?: Prisma.inventoryDataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.inventoryDataInclude<ExtArgs> | null
  /**
   * The data needed to update a inventoryData.
   */
  data: Prisma.XOR<Prisma.inventoryDataUpdateInput, Prisma.inventoryDataUncheckedUpdateInput>
  /**
   * Choose, which inventoryData to update.
   */
  where: Prisma.inventoryDataWhereUniqueInput
}

/**
 * inventoryData updateMany
 */
export type inventoryDataUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update inventoryData.
   */
  data: Prisma.XOR<Prisma.inventoryDataUpdateManyMutationInput, Prisma.inventoryDataUncheckedUpdateManyInput>
  /**
   * Filter which inventoryData to update
   */
  where?: Prisma.inventoryDataWhereInput
  /**
   * Limit how many inventoryData to update.
   */
  limit?: number
}

/**
 * inventoryData upsert
 */
export type inventoryDataUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the inventoryData
   */
  select?: Prisma.inventoryDataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the inventoryData
   */
  omit?: Prisma.inventoryDataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.inventoryDataInclude<ExtArgs> | null
  /**
   * The filter to search for the inventoryData to update in case it exists.
   */
  where: Prisma.inventoryDataWhereUniqueInput
  /**
   * In case the inventoryData found by the `where` argument doesn't exist, create a new inventoryData with this data.
   */
  create: Prisma.XOR<Prisma.inventoryDataCreateInput, Prisma.inventoryDataUncheckedCreateInput>
  /**
   * In case the inventoryData was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.inventoryDataUpdateInput, Prisma.inventoryDataUncheckedUpdateInput>
}

/**
 * inventoryData delete
 */
export type inventoryDataDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the inventoryData
   */
  select?: Prisma.inventoryDataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the inventoryData
   */
  omit?: Prisma.inventoryDataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.inventoryDataInclude<ExtArgs> | null
  /**
   * Filter which inventoryData to delete.
   */
  where: Prisma.inventoryDataWhereUniqueInput
}

/**
 * inventoryData deleteMany
 */
export type inventoryDataDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which inventoryData to delete
   */
  where?: Prisma.inventoryDataWhereInput
  /**
   * Limit how many inventoryData to delete.
   */
  limit?: number
}

/**
 * inventoryData findRaw
 */
export type inventoryDataFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * inventoryData aggregateRaw
 */
export type inventoryDataAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * inventoryData.items
 */
export type inventoryData$itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryItem
   */
  select?: Prisma.InventoryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryItem
   */
  omit?: Prisma.InventoryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryItemInclude<ExtArgs> | null
  where?: Prisma.InventoryItemWhereInput
  orderBy?: Prisma.InventoryItemOrderByWithRelationInput | Prisma.InventoryItemOrderByWithRelationInput[]
  cursor?: Prisma.InventoryItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InventoryItemScalarFieldEnum | Prisma.InventoryItemScalarFieldEnum[]
}

/**
 * inventoryData without action
 */
export type inventoryDataDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the inventoryData
   */
  select?: Prisma.inventoryDataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the inventoryData
   */
  omit?: Prisma.inventoryDataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.inventoryDataInclude<ExtArgs> | null
}
